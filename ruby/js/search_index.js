var search_data = {"index":{"searchIndex":["failedsaneparametercheck","hailstonesequence","object","saneparametererrmsg","sequencestate","treegraph","treegraphnode","assert_sane_parameterisation()","function()","hailstone_sequence()","new()","new()","new()","new()","reverse_function()","stopping_time()","stopping_time_terminus()","tree_graph()","readme"],"longSearchIndex":["failedsaneparametercheck","hailstonesequence","object","saneparametererrmsg","sequencestate","treegraph","treegraphnode","object#assert_sane_parameterisation()","object#function()","object#hailstone_sequence()","failedsaneparametercheck::new()","hailstonesequence::new()","treegraph::new()","treegraphnode::new()","object#reverse_function()","object#stopping_time()","object#stopping_time_terminus()","object#tree_graph()",""],"info":[["FailedSaneParameterCheck","","FailedSaneParameterCheck.html","","<p>Thrown when either p, the modulus, or a, the multiplicand, are zero.\n"],["HailstoneSequence","","HailstoneSequence.html","","<p>Contains the results of computing a hailstone sequence via hailstone_sequence(~).\n"],["Object","","Object.html","",""],["SaneParameterErrMsg","","SaneParameterErrMsg.html","","<p>Error message constants, to be used as input to the FailedSaneParameterCheck.\n"],["SequenceState","","SequenceState.html","","<p>SequenceState for Cycle Control: Descriptive flags to indicate when some event occurs in the hailstone ‚Ä¶\n"],["TreeGraph","","TreeGraph.html","","<p>Contains the results of computing the Tree Graph via tree_graph(~). Contains the root node of a tree ‚Ä¶\n"],["TreeGraphNode","","TreeGraphNode.html","","<p>Nodes that form a ‚Äútree graph‚Äù, structured as a tree, with their own node‚Äôs value, as well ‚Ä¶\n"],["assert_sane_parameterisation","Object","Object.html#method-i-assert_sane_parameterisation","(p, a, _b)","<p>Handles the sanity check for the parameterisation (p,a,b) required by both the function and reverse function. ‚Ä¶\n"],["function","Object","Object.html#method-i-function","(n, p: 2, a: 3, b: 1)","<p>Returns the output of a single application of a Collatz-esque function.\n<p>@raise [FailedSaneParameterCheck] ‚Ä¶\n"],["hailstone_sequence","Object","Object.html#method-i-hailstone_sequence","(initial_value, p: 2, a: 3, b: 1, max_total_stopping_time: 1000, total_stopping_time: true)","<p>Returns a list of successive values obtained by iterating a Collatz-esque function, until either 1 is ‚Ä¶\n"],["new","FailedSaneParameterCheck","FailedSaneParameterCheck.html#method-c-new","(msg = \"This is a custom exception\", exception_type = \"FailedSaneParameterCheck\")","<p>Construct a FailedSaneParameterCheck with a message associated with the provided enum. @param [String] ‚Ä¶\n"],["new","HailstoneSequence","HailstoneSequence.html#method-c-new","()",""],["new","TreeGraph","TreeGraph.html#method-c-new","()",""],["new","TreeGraphNode","TreeGraphNode.html#method-c-new","()",""],["reverse_function","Object","Object.html#method-i-reverse_function","(n, p: 2, a: 3, b: 1)","<p>Returns the output of a single application of a Collatz-esque reverse function. If only one value is ‚Ä¶\n"],["stopping_time","Object","Object.html#method-i-stopping_time","(initial_value, p: 2, a: 3, b: 1, max_stopping_time: 1000, total_stopping_time: false)","<p>Returns the stopping time, the amount of iterations required to reach a value less than the initial value, ‚Ä¶\n"],["stopping_time_terminus","Object","Object.html#method-i-stopping_time_terminus","(n, total_stop)","<p>Provides the appropriate lambda to use to check if iterations on an initial value have reached either ‚Ä¶\n"],["tree_graph","Object","Object.html#method-i-tree_graph","(initial_value, max_orbit_distance, p: 2, a: 3, b: 1, __cycle_prevention: nil)","<p>Returns a directed tree graph of the reverse function values up to a maximum nesting of max_orbit_distance ‚Ä¶\n"],["README","","README_md.html","","<p>Collatz: Ruby üîªüíéüîª\n<p>Functions related to the Collatz/Syracuse/3N+1 problem, implemented in Ruby.\n<p>Getting ‚Ä¶\n"]]}}