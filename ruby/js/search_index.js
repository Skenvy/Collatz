var search_data = {"index":{"searchIndex":["collatz","failedsaneparametercheck","hailstonesequence","saneparametererrmsg","sequencestate","treegraph","treegraphnode","==()","function()","hailstone_sequence()","new()","new()","new()","new()","reverse_function()","stopping_time()","sub_tree_equals()","tree_graph()","readme"],"longSearchIndex":["collatz","collatz::failedsaneparametercheck","collatz::hailstonesequence","collatz::saneparametererrmsg","collatz::sequencestate","collatz::treegraph","collatz::treegraphnode","collatz::treegraph#==()","collatz#function()","collatz#hailstone_sequence()","collatz::failedsaneparametercheck::new()","collatz::hailstonesequence::new()","collatz::treegraph::new()","collatz::treegraphnode::new()","collatz#reverse_function()","collatz#stopping_time()","collatz::treegraphnode#sub_tree_equals()","collatz#tree_graph()",""],"info":[["Collatz","","Collatz.html","","<p>Provides the basic functionality to interact with the Collatz conjecture. The parameterisation uses the ‚Ä¶\n"],["Collatz::FailedSaneParameterCheck","","Collatz/FailedSaneParameterCheck.html","","<p>Thrown when either p, the modulus, or a, the multiplicand, are zero.\n"],["Collatz::HailstoneSequence","","Collatz/HailstoneSequence.html","","<p>Contains the results of computing a hailstone sequence via hailstone_sequence(~).\n"],["Collatz::SaneParameterErrMsg","","Collatz/SaneParameterErrMsg.html","","<p>Error message constants, to be used as input to the FailedSaneParameterCheck.\n"],["Collatz::SequenceState","","Collatz/SequenceState.html","","<p>SequenceState for Cycle Control: Descriptive flags to indicate when some event occurs in the hailstone ‚Ä¶\n"],["Collatz::TreeGraph","","Collatz/TreeGraph.html","","<p>Contains the results of computing the Tree Graph via tree_graph(~). Contains the root node of a tree ‚Ä¶\n"],["Collatz::TreeGraphNode","","Collatz/TreeGraphNode.html","","<p>Nodes that form a ‚Äútree graph‚Äù, structured as a tree, with their own node‚Äôs value, as well ‚Ä¶\n"],["==","Collatz::TreeGraph","Collatz/TreeGraph.html#method-i-3D-3D","(other)","<p>The equality between TreeGraph‚Äôs is determined by the equality check on subtrees. A subtree check ‚Ä¶\n"],["function","Collatz","Collatz.html#method-i-function","(n, p: 2, a: 3, b: 1)","<p>Returns the output of a single application of a Collatz-esque function.\n<p>@raise FailedSaneParameterCheck ‚Ä¶\n"],["hailstone_sequence","Collatz","Collatz.html#method-i-hailstone_sequence","(initial_value, p: 2, a: 3, b: 1, max_total_stopping_time: 1000, total_stopping_time: true)","<p>Returns a list of successive values obtained by iterating a Collatz-esque function, until either 1 is ‚Ä¶\n"],["new","Collatz::FailedSaneParameterCheck","Collatz/FailedSaneParameterCheck.html#method-c-new","(msg = \"This is a custom exception\", exception_type = \"FailedSaneParameterCheck\")","<p>Construct a FailedSaneParameterCheck with a message associated with the provided enum. @param [String] ‚Ä¶\n"],["new","Collatz::HailstoneSequence","Collatz/HailstoneSequence.html#method-c-new","(initial_value, p, a, b, max_total_stopping_time, total_stopping_time)","<p>Initialise and compute a new Hailstone Sequence.\n<p>@raise FailedSaneParameterCheck If p or a are 0.\n<p>@param ‚Ä¶\n"],["new","Collatz::TreeGraph","Collatz/TreeGraph.html#method-c-new","(node_value, max_orbit_distance, p, a, b, create_raw: false, root: nil)","<p>Create a new TreeGraph with the root node defined by the inputs.\n<p>@raise FailedSaneParameterCheck If p ‚Ä¶\n"],["new","Collatz::TreeGraphNode","Collatz/TreeGraphNode.html#method-c-new","(node_value, max_orbit_distance, p, a, b, cycle_check: nil, create_raw: false, terminal_sequence_state: nil, pre_n_div_p_node: nil, pre_an_plus_b_node: nil)","<p>Create an instance of TreeGraphNode which will yield its entire sub-tree of all child nodes.\n<p>@raise FailedSaneParameterCheck ‚Ä¶\n"],["reverse_function","Collatz","Collatz.html#method-i-reverse_function","(n, p: 2, a: 3, b: 1)","<p>Returns the output of a single application of a Collatz-esque reverse function. If only one value is ‚Ä¶\n"],["stopping_time","Collatz","Collatz.html#method-i-stopping_time","(initial_value, p: 2, a: 3, b: 1, max_stopping_time: 1000, total_stopping_time: false)","<p>Returns the stopping time, the amount of iterations required to reach a value less than the initial value, ‚Ä¶\n"],["sub_tree_equals","Collatz::TreeGraphNode","Collatz/TreeGraphNode.html#method-i-sub_tree_equals","(tgn)","<p>This will only confirm an equality if the whole subtree of both nodes, including node values, sequence ‚Ä¶\n"],["tree_graph","Collatz","Collatz.html#method-i-tree_graph","(initial_value, max_orbit_distance, p: 2, a: 3, b: 1)","<p>Returns a directed tree graph of the reverse function values up to a maximum nesting of max_orbit_distance ‚Ä¶\n"],["README","","README_md.html","","<p>Collatz: Ruby üîªüíéüîª\n<p>Functions related to the Collatz/Syracuse/3N+1 problem, implemented in Ruby.\n<p>Getting ‚Ä¶\n"]]}}