name: Julia 🔴🟢🟣 Test 🦂 Release 🚰 and Register 📦
on:
  push:
    branches:
    - 'main'
    paths:
    - 'julia/**'
    - '!julia/**.md'
    - '.github/workflows/julia-*'
  workflow_dispatch:
permissions: {}
defaults:
  run:
    shell: bash
    working-directory: julia
jobs:
  context:
    name: GitHub 🐱‍👤 Context 📑
    uses: ./.github/workflows/github-context.yaml
  test:
    name: Julia 🔴🟢🟣 Test 🦂
    uses: ./.github/workflows/julia-test.yaml
  workflow-conditions:
    name: 🛑🛑🛑 Stop builds that didn't change the release version 🛑🛑🛑
    runs-on: ubuntu-latest
    outputs:
      version-file-changed: ${{ steps.version-file-check.outputs.version-file-changed }}
      version-tag-exists: ${{ steps.version-tag-exists.outputs.version-tag-exists }}
    steps:
    - name: 🏁 Checkout
      uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
      with:
        fetch-depth: 2
    - name: Check if version files changed
      id: version-file-check
      # The project toml contains _more_ than _just_ the version, but updating it would reflect
      # a logical update to the project which semantically _should_ include a version update.
      run: |
        export VERSION_FILE="julia/Project.toml"
        [ "$(git diff HEAD^1.. --name-only | grep -e "^$VERSION_FILE$")" == "$VERSION_FILE" ] && echo "version-file-changed=${{toJSON(true)}}" >> $GITHUB_OUTPUT || echo "version-file-changed=${{toJSON(false)}}" >> $GITHUB_OUTPUT
    - name: Notify on version-file-check
      run: echo "::Notice::version-file-changed is ${{ fromJSON(steps.version-file-check.outputs.version-file-changed) }}"
    - name: Check if version specified in version file has not released.
      id: version-tag-exists
      run: |
        git fetch --tags
        export VER=$(grep Project.toml -e "^version = " | cut -d \" -f 2)
        [ -z "$(git tag -l "julia-v$VER")" ] && echo "version-tag-exists=${{toJSON(false)}}" >> $GITHUB_OUTPUT || echo "version-tag-exists=${{toJSON(true)}}" >> $GITHUB_OUTPUT
    - name: Notify on version-tag-exists
      run: echo "::Notice::version-tag-exists is ${{ fromJSON(steps.version-tag-exists.outputs.version-tag-exists) }}"
  # Now any step that should only run on the version change can use
  # "needs: [workflow-conditions]" Which will yield the condition checks below.
  # We want to "release" automatically if "version-file-changed" is true on push
  # Or manually if workflow_dispatch. BOTH need "version-tag-exists" is false.
  release-and-register:
    name: Julia 🔴🟢🟣 Release 🚰 and Register 📦
    needs: [test, workflow-conditions]
    permissions:
      contents: write
    if: >-
      ${{ ((fromJSON(needs.workflow-conditions.outputs.version-file-changed) == true && github.event_name == 'push') ||
      github.event_name == 'workflow_dispatch') && fromJSON(needs.workflow-conditions.outputs.version-tag-exists) == false }}
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.release_step.outputs.new_version }}
    steps:
    - name: 🏁 Checkout
      uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
      with:
        fetch-depth: 0
    - name: Julia 🔴🟢🟣 Release 🚰 and Register 📦
      uses: Skenvy/julia-release@8531021313f6e5dcb445f3188b366ebcd48417ff # v1.1.0
      id: release_step
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        deployment_branch: 'main'
        subdirectory: "julia"
        release_tag_template: "julia-v<NEW_VERSION>"
        release_name_template: "Julia: Version <NEW_VERSION>"
        # DOCS # >>>
        ######################################################################################
        # If a docs deployment fails, because this only runs on a push to the project file   #
        # but deploydocs is designed around a push of a tag, and we've chosen to frob the    #
        # GITHUB_REF to make it a tag for deploydocs, then we need to uncomment the disallow #
        # on both release and register, and swap the version in the project. If doing that   #
        # though, keep in mind that the test step doesn't trigger on pushes to main, because #
        # it assumes this will trigger on any required build push to main after a PR. So be  #
        # careful not to change any actual ./julia/ code when debugging the deploydocs.      #
        # Change the version with "disposable-build-info" in vX.Y.Z+disposable-build-info    #
        ######################################################################################
        # auto_release: false
        # auto_register: false
        # DOCS # <<<
  docs:
    name: Julia 🔴🟢🟣 Docs 📄
    needs: [release-and-register]
    permissions:
      contents: write
    # Couldn't find whether an unset value becomes null or empty. Be safe. Stay hydrated.
    if: ${{ needs.release-and-register.outputs.new_version != null && needs.release-and-register.outputs.new_version != '' }}
    runs-on: ubuntu-latest
    steps:
    - name: 🏁 Checkout
      uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
    - name: 🔴🟢🟣 Set up Julia
      uses: julia-actions/setup-julia@5113fd16e9c6c3a86d6ae9bc9155c40ce05e3acc # v1.8.1
      with:
        version: '1.7.2'
    - name: 📄 Docs
      run: export GITHUB_REF="refs/tags/v${{ needs.release-and-register.outputs.new_version }}" && echo $GITHUB_REF && make docs_deploy
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Setting GITHUB_REF in this env doesn't work, but exporting it in the run above does.
        # GITHUB_REF: 'refs/tags/v${{ needs.release-and-register.outputs.new_version }}'
  docs-merge:
    name: GitHub 🐱‍👤 Pages 📄 Merger 🧬
    needs: [docs]
    permissions:
      contents: write
    uses: ./.github/workflows/github-pages.yaml
    with:
      merge_from: 'gh-pages-julia'
