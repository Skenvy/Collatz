name: Julia üö• Tests ü¶Ç
on:
  push:
    branches-ignore:
    - 'main'
    # Ignoring the only branch that triggers the build which calls this with it's own push
    # context via workflow call below will stop double runs of the tox step. But we do still
    # need conditions on main's HEAD ref for each job as the callee workflow sends a puch event.
    paths:
    - 'julia/**'
    - '.github/workflows/julia-*'
  pull_request:
    branches:
    - 'main'
    paths:
    - 'julia/**'
    - '.github/workflows/julia-*'
  workflow_call: # To be called by build, on a push to main that ups the version
  # Although this is an event itself - and the event payload is the same as the callee,
  # the "event_name" is _also_ the same. The event's in the callee are push and workflow_dispatch.
defaults:
  run:
    shell: bash
    working-directory: julia
jobs:
  quick-test:
    name: Julia üö• Quick Test ü¶Ç
    if: ${{ github.event_name == 'push' && !(github.event.ref == 'refs/heads/main') }}
    runs-on: ubuntu-latest
    steps:
    - name: üèÅ Checkout
      uses: actions/checkout@v3
    - name: üö• Set up Julia
      uses: julia-actions/setup-julia@v1
      with:
        version: '1.2.0' # Minimum Julia version the package supports.
        arch: 'x64'
    - name: üß± Install build dependencies
      run: |
        make deps
    - name: ü¶Ç Test
      run: |
        make test
  full-test:
    name: Julia üö• Full Test ü¶Ç
    if: >- 
      ${{ github.event_name == 'pull_request' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && github.event.ref == 'refs/heads/main') }}
    runs-on: '${{ matrix.os }}'
    strategy:
      fail-fast: false
      matrix:
        # From versions in https://julialang-s3.julialang.org/bin/versions.json
        version: ['stable', 'lts', 'nightly', '1.2.0'] # Minimum Julia version the package supports.
        os: [ubuntu-latest, macOS-latest, windows-latest]
        arch: [x64]
    steps:
    - name: üèÅ Checkout
      uses: actions/checkout@v3
    - name: üö• Set up Julia ${{ matrix.version }}
      uses: julia-actions/setup-julia@v1
      with:
        version: ${{ matrix.version }}
        arch: ${{ matrix.arch }}
    - name: üß∞ Cache
      uses: actions/cache@v1
      env:
        cache-name: cache-artifacts
      with:
        path: ~/.julia/artifacts
        key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
        restore-keys: |
          ${{ runner.os }}-test-${{ env.cache-name }}-
          ${{ runner.os }}-test-
          ${{ runner.os }}-
    # https://github.com/julia-actions/julia-buildpkg
    - name: üß± Build
      uses: julia-actions/julia-buildpkg@v1
      with:
        project: julia
    # https://github.com/julia-actions/julia-runtest
    - name: ü¶Ç Test
      uses: julia-actions/julia-runtest@v1
      with:
        project: julia
    # https://github.com/julia-actions/julia-processcoverage
    - name: üß± Build
      uses: julia-actions/julia-processcoverage@v1
      with:
        directories: julia/src
    # - name: üëì CodeCov
    #   uses: codecov/codecov-action@v1
    #   with:
    #     file: lcov.info

  # docs:
  #   name: Documentation
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: julia-actions/setup-julia@v1
  #       with:
  #         version: '1'
  #     - run: |
  #         julia --project=docs -e '
  #           using Pkg
  #           Pkg.develop(PackageSpec(path=pwd()))
  #           Pkg.instantiate()'
  #     - run: |
  #         julia --project=docs -e '
  #           using Documenter: doctest
  #           using MYPACKAGE
  #           doctest(MYPACKAGE)' # change MYPACKAGE to the name of your package
  #     - run: julia --project=docs docs/make.jl
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
