name: Python 🐍🐍🐍 Test 🦂 Build 🧱 Release 🚰 and Publish 📦
on:
  push:
    # branches:
    # - 'main'
    paths:
    - 'python/**'
    - '!python/**.md'
    - '.github/workflows/python-*'
  workflow_dispatch:
permissions: {}
defaults:
  run:
    shell: bash
    working-directory: python
jobs:
  context:
    name: GitHub 🐱‍👤 Context 📑
    uses: ./.github/workflows/github-context.yaml
  test:
    name: Python 🐍🐍🐍 Test 🦂
    uses: ./.github/workflows/python-test.yaml
  workflow-conditions:
    name: 🛑🛑🛑 Stop builds that didn't change the release version 🛑🛑🛑
    runs-on: ubuntu-latest
    outputs:
      version-file-changed: ${{ steps.version-file-check.outputs.version-file-changed }}
      version-tag-exists: ${{ steps.version-tag-exists.outputs.version-tag-exists }}
    steps:
    - name: 🏁 Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 2
    - name: Check if version files changed
      id: version-file-check
      run: |
        export VERSION_FILE="python/src/collatz/__version__.py"
        [ "$(git diff HEAD^1.. --name-only | grep -e "^$VERSION_FILE$")" == "$VERSION_FILE" ] && echo "::set-output name=version-file-changed::${{toJSON(true)}}" || echo "::set-output name=version-file-changed::${{toJSON(false)}}"
    - name: Notify on version-file-check
      run: echo "::Notice::version-file-changed is ${{ fromJSON(steps.version-file-check.outputs.version-file-changed) }}"
    - name: Check if version specified in version file has not released.
      id: version-tag-exists
      run: |
        git fetch --tags
        export VER=$(cut -d \" -f 2 src/collatz/__version__.py)
        [ -z "$(git tag -l "python-v$VER")" ] && echo "::set-output name=version-tag-exists::${{toJSON(false)}}" || echo "::set-output name=version-tag-exists::${{toJSON(true)}}"
    - name: Notify on version-tag-exists
      run: echo "::Notice::version-tag-exists is ${{ fromJSON(steps.version-tag-exists.outputs.version-tag-exists) }}"
  # Now any step that should only run on the version change can use
  # "needs: [workflow-conditions]" Which will yield the condition checks below.
  # We want to "release" automatically if "version-file-changed" is true on push
  # Or manually if workflow_dispatch. BOTH need "version-tag-exists" is false.
  build:
    name: Python 🐍🐍🐍 Build 🧱
    needs: [test, workflow-conditions]
    # if: >-
    #   ${{ ((fromJSON(needs.workflow-conditions.outputs.version-file-changed) == true && github.event_name == 'push') ||
    #   github.event_name == 'workflow_dispatch') && fromJSON(needs.workflow-conditions.outputs.version-tag-exists) == false }}
    runs-on: ubuntu-latest
    steps:
    - name: 🏁 Checkout
      uses: actions/checkout@v3
    - name: 🐍🐍🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: 🧱 Install build dependencies
      run: make venv
    - name: 🎡 Build wheel and source
      run: make build
    - name: 🆙 Upload dists
      uses: actions/upload-artifact@v3
      with:
        name: built-dists
        path: python/dist/
        if-no-files-found: error
  release:
    name: Python 🐍🐍🐍 Release 🚰
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: 🏁 Checkout
      uses: actions/checkout@v3
    - name: 🆒 Download dists
      uses: actions/download-artifact@v3
      with:
        name: built-dists
        path: python/dist
  #   - name: 🚰 Release
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     run: >-
  #       export VER=$(cut -d \" -f 2 src/collatz/__version__.py) && 
  #       gh release create
  #       python-v$VER
  #       "$(find dist | grep \\-none\\-any\\.whl)#Wheel"
  #       "$(find dist | grep \\.tar\\.gz)#Tarball"
  #       --generate-notes
  #       -t "Python: Version $VER"
  # publish:
  #   name: Python 🐍🐍🐍 Publish 📦
  #   needs: [release]
  #   runs-on: ubuntu-latest
  #   steps:
  #   # Although the dists are built uses checkout to satisfy refs/tags existence
  #   # which were created by the release, prior to uploading to pypi.
  #   - name: 🏁 Checkout
  #     uses: actions/checkout@v3
  #   - name: 🆒 Download dists
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: built-dists
  #       path: python/dist
  #   - name: 📦 Publish to Test PyPI
  #     uses: pypa/gh-action-pypi-publish@release/v1.5
  #     with:
  #       packages_dir: python/dist
  #       skip_existing: true
  #       password: ${{ secrets.TEST_PYPI_API_TOKEN }}
  #       repository_url: https://test.pypi.org/legacy/
  #   - name: 📦 Publish to PyPI
  #     uses: pypa/gh-action-pypi-publish@release/v1.5
  #     with:
  #       packages_dir: python/dist
  #       password: ${{ secrets.PYPI_API_TOKEN }}
